import java.io.DataInputStream;
import java.io.FileInputStream;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

/**
 * 
 * @author Vu-Nguyen Bui & Tim Hagemann <br>
 *         IT-Sicherheit Praktikum 3 - JAVA Kryptographie API <br>
 *         Aufgabe 2
 */
public class SSF {
	private static PrivateKey prvKey;
	private static PublicKey pubKey;
	private static SecretKey secretKey;

	public static void main(String[] args) throws Exception {
		getPrivateKey("KMueller.prv");
		getPublicKey("KMueller.pub");

		System.out.println(pubKey.getEncoded());

		System.out.println(prvKey.getEncoded());
	}

	public void signatur() {
		// TODO
		Signature rsaSignature = null;
		byte[] signatureBytes = null;
		try {
			// als Erstes erzeugen wir das Signatur-Objekt
			rsaSignature = Signature.getInstance("SHA256withRSA");
			// zum Signieren benoetigen wir den privaten Schluessel (hier: RSA)
			rsaSignature.initSign(prvKey);
			// Daten fuer die kryptographische Hashfunktion (hier: SHA-256)
			// liefern
			rsaSignature.update(secretKey.getEncoded());
			// Signaturbytes durch Verschluesselung des Hashwerts (mit privatem
			// RSA-Schluessel) erzeugen
			signatureBytes = rsaSignature.sign();
		} catch (NoSuchAlgorithmException ex) {
			System.out.println("Keine Implementierung fuer SHA256withRSA!");
		} catch (InvalidKeyException ex) {
			System.out.println("Falscher Schluessel!");
		} catch (SignatureException ex) {
			System.out.println("Fehler beim Signieren der Nachricht!");
		}
	}

	public static byte[] encrypt(SecretKey secretKey, PublicKey key) {
		byte[] cipherText = null;
		try {
			final Cipher cipher = Cipher.getInstance("RSA");
			cipher.init(Cipher.ENCRYPT_MODE, key);
			cipherText = cipher.doFinal(secretKey.getEncoded());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return cipherText;
	}

	public void generateAESKey() throws NoSuchAlgorithmException {
		KeyGenerator keyGen = KeyGenerator.getInstance("AES");
		keyGen.init(128); // for example
		secretKey = keyGen.generateKey();
	}

	public static void getPrivateKey(String fileName) throws Exception {
		DataInputStream is = new DataInputStream(new FileInputStream(fileName));

		byte[] prvKeyBytes = new byte[is.readInt()];
		is.readFully(prvKeyBytes);
		is.close();

		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(prvKeyBytes);
		KeyFactory keyFac = KeyFactory.getInstance("RSA");
		prvKey = keyFac.generatePrivate(pkcs8KeySpec);
	}

	public static void getPublicKey(String fileName) throws Exception {
		DataInputStream is = new DataInputStream(new FileInputStream(fileName));

		byte[] pubKeyBytes = new byte[is.readInt()];
		is.readFully(pubKeyBytes);
		is.close();

		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(pubKeyBytes);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		pubKey = kf.generatePublic(x509KeySpec);
	}

}
