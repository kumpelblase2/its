package Praktika2;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class TripleDES {
	File inputFile;
	File outputFile;
	File keyFile;

	public TripleDES(File input, File output, File key) {
		this.inputFile = input;
		this.outputFile = output;
		this.keyFile = key;
	}

	public void encrypt() throws IOException {
		InputStream stream = new FileInputStream(this.inputFile);
		OutputStream output = new FileOutputStream(outputFile);
		DESKey desKey = readKeys();
		byte[] buffer = new byte[24];
		byte[] ivBuffer = new byte[8];
		byte[] encryptBuffer = new byte[8];
		DES des1 = new DES(desKey.keys[0]);
		DES des2 = new DES(desKey.keys[1]);
		DES des3 = new DES(desKey.keys[2]);
		des1.encrypt(desKey.iv, 0, ivBuffer, 0);

		while (stream.read(buffer) > 0) {
			for (int i = 0; i < 8; i++) {
				buffer[i] = (byte) (buffer[i] ^ (ivBuffer[i]));
			}
			des2.decrypt(buffer, 8, encryptBuffer, 0);
			for (int i = 8; i < 16; i++) {
				buffer[i] = (byte) (buffer[i] ^ (encryptBuffer[i - 8]));
			}
			des3.encrypt(buffer, 16, encryptBuffer, 0);
			for (int i = 16; i < 24; i++) {
				buffer[i] = (byte) (buffer[i] ^ (encryptBuffer[i - 16]));
			}

			output.write(buffer);
		}
		stream.close();
		output.close();

	}

	public void decrypt() throws IOException {
		InputStream stream = new FileInputStream(this.inputFile);
		OutputStream output = new FileOutputStream(outputFile);
		DESKey desKey = readKeys();
		byte[] buffer = new byte[24];
		byte[] ivBuffer = new byte[8];
		byte[] encryptBuffer = new byte[8];
		byte[] decryptBuffer = new byte[24];
		DES des1 = new DES(desKey.keys[0]);
		DES des2 = new DES(desKey.keys[1]);
		DES des3 = new DES(desKey.keys[2]);
		des1.encrypt(desKey.iv, 0, ivBuffer, 0);

		while (stream.read(buffer) > 0) {
			for (int i = 0; i < 8; i++) {
				decryptBuffer[i] = (byte) (buffer[i] ^ (ivBuffer[i]));
			}
			des2.decrypt(buffer, 8, encryptBuffer, 0);
			for (int i = 8; i < 16; i++) {
				decryptBuffer[i] = (byte) (buffer[i] ^ (encryptBuffer[i - 8]));
			}
			des3.encrypt(buffer, 16, encryptBuffer, 0);
			for (int i = 16; i < 24; i++) {
				decryptBuffer[i] = (byte) (buffer[i] ^ (encryptBuffer[i - 16]));
			}

			output.write(decryptBuffer);
		}
		stream.close();
		output.close();
	}

	private DESKey readKeys() throws IOException {
		InputStream streamKey = new FileInputStream(this.keyFile);
		DESKey desKey = new DESKey();
		byte[] buffer = new byte[8];
		for (int i = 0; i < 3; i++) {
			streamKey.read(buffer);
			System.arraycopy(buffer, 0, desKey.keys[i], 0, 8);
		}
		streamKey.read(buffer);
		System.arraycopy(buffer, 0, desKey.iv, 0, 8);
		streamKey.close();

		return desKey;
	}
	
	public static void main(String[] args) throws IOException{
        String action = args[3];
        File input = new File(args[0]);
        File inputKey = new File(args[1]);
        File output = new File(args[2]);
        TripleDES  tripleDes = new TripleDES(input, output, inputKey);
        
        if(action.equals("encrypt")){
        	tripleDes.encrypt();
        } else if(action.equals("decrypt")){
        	tripleDes.decrypt();
        }
	}
}
